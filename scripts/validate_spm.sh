#!/bin/bash

# Script de Valida√ß√£o do Service Performance Monitoring (SPM)
# Este script verifica se todas as componentes do SPM est√£o funcionando corretamente

echo "üîç VALIDA√á√ÉO DO SPM (Service Performance Monitoring) - Fintelli"
echo "================================================================="

# Cores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para checar se um servi√ßo est√° respondendo
check_service() {
    local service_name=$1
    local url=$2
    local expected_status=${3:-200}
    
    echo -n "üì° Checking $service_name... "
    
    if curl -s -o /dev/null -w "%{http_code}" "$url" | grep -q "$expected_status"; then
        echo -e "${GREEN}‚úÖ OK${NC}"
        return 0
    else
        echo -e "${RED}‚ùå FAILED${NC}"
        return 1
    fi
}

# Fun√ß√£o para checar m√©tricas espec√≠ficas
check_metrics() {
    local metrics_name=$1
    local query=$2
    local endpoint=$3
    
    echo -n "üìä Checking $metrics_name... "
    
    response=$(curl -s "$endpoint/api/v1/query?query=$query")
    
    if echo "$response" | grep -q '"status":"success"'; then
        result_count=$(echo "$response" | jq -r '.data.result | length')
        if [ "$result_count" -gt 0 ]; then
            echo -e "${GREEN}‚úÖ OK ($result_count metrics found)${NC}"
            return 0
        else
            echo -e "${YELLOW}‚ö†Ô∏è  No data yet${NC}"
            return 1
        fi
    else
        echo -e "${RED}‚ùå FAILED${NC}"
        return 1
    fi
}

echo ""
echo "üîß 1. VERIFICANDO INFRAESTRUTURA BASE"
echo "------------------------------------"

# Verificar se os servi√ßos est√£o rodando
check_service "OTel Collector" "http://localhost:8888/metrics"
check_service "Jaeger UI" "http://localhost:16687"
check_service "Jaeger Admin" "http://localhost:14269/metrics"
check_service "Prometheus" "http://localhost:9091"
check_service "Grafana" "http://localhost:3001/api/health"

echo ""
echo "üìä 2. VERIFICANDO M√âTRICAS SPM"
echo "------------------------------"

# Verificar se m√©tricas SPM est√£o sendo geradas
check_metrics "SPM Calls Total" "calls_total" "http://localhost:9091"
check_metrics "SPM Duration Histogram" "duration_bucket" "http://localhost:9091"
check_metrics "SPM Latency" "duration_sum" "http://localhost:9091"

echo ""
echo "üéØ 3. VERIFICANDO M√âTRICAS ESPEC√çFICAS DO FINTELLI"
echo "-------------------------------------------------"

# Verificar m√©tricas espec√≠ficas dos servi√ßos do Fintelli
check_metrics "Backend Service Metrics" "calls_total{service_name=\"fintelli-backend\"}" "http://localhost:9091"
check_metrics "Transaction Endpoint Metrics" "calls_total{operation=~\".*transaction.*\"}" "http://localhost:9091"
check_metrics "HTTP Method Breakdown" "calls_total{http_method!=\"\"}" "http://localhost:9091"
check_metrics "Status Code Distribution" "calls_total{status_code!=\"\"}" "http://localhost:9091"

echo ""
echo "üöÄ 4. TESTE DE GERA√á√ÉO DE TR√ÅFEGO"
echo "--------------------------------"

echo "üì§ Gerando tr√°fego de teste para o backend..."

# Gerar algumas requisi√ß√µes de teste para criar dados SPM
for i in {1..5}; do
    echo -n "  Request $i... "
    if curl -s -o /dev/null -w "%{http_code}" "http://localhost:8001/docs" | grep -q "200"; then
        echo -e "${GREEN}‚úÖ${NC}"
    else
        echo -e "${RED}‚ùå${NC}"
    fi
    sleep 1
done

echo ""
echo "‚è≥ Aguardando 30 segundos para m√©tricas serem processadas..."
sleep 30

echo ""
echo "üìà 5. VALIDA√á√ÉO FINAL DAS M√âTRICAS SPM"
echo "------------------------------------"

# Verificar novamente se as m√©tricas foram coletadas
check_metrics "Backend Calls After Traffic" "calls_total{service_name=\"fintelli-backend\"}" "http://localhost:9091"
check_metrics "Request Duration Metrics" "duration_bucket{service_name=\"fintelli-backend\"}" "http://localhost:9091"

echo ""
echo "üé® 6. VERIFICANDO DASHBOARDS"
echo "---------------------------"

# Verificar se dashboard SPM pode ser acessado
check_service "Grafana Dashboard API" "http://localhost:3000/api/dashboards/uid/fintelli-spm" 404

echo ""
echo "üìã 7. RELAT√ìRIO DE VALIDA√á√ÉO"
echo "----------------------------"

# Coletar algumas m√©tricas para relat√≥rio
echo "üìä Coletando m√©tricas atuais..."

calls_total=$(curl -s "http://localhost:9091/api/v1/query?query=sum(calls_total)" | jq -r '.data.result[0].value[1] // "0"')
duration_avg=$(curl -s "http://localhost:9091/api/v1/query?query=rate(duration_sum[5m])/rate(duration_count[5m])" | jq -r '.data.result[0].value[1] // "0"')

echo ""
echo -e "${GREEN}‚úÖ RELAT√ìRIO SPM${NC}"
echo "=================="
echo "üìû Total de Calls: $calls_total"
echo "‚è±Ô∏è  Lat√™ncia M√©dia: ${duration_avg}s"
echo "üïê Timestamp: $(date)"

echo ""
echo "üîó LINKS √öTEIS:"
echo "---------------"
echo "üéØ Jaeger UI: http://localhost:16687"
echo "üìä Prometheus: http://localhost:9091"
echo "üé® Grafana: http://localhost:3001"
echo "üìà OTel Metrics: http://localhost:8888/metrics"

echo ""
echo "üìö COMANDOS DE TROUBLESHOOTING:"
echo "------------------------------"
echo "# Ver logs do OTel Collector:"
echo "docker logs fintelli_otel_collector"
echo ""
echo "# Ver m√©tricas SPM direto do collector:"
echo "curl http://localhost:8890/metrics | grep -E 'calls_total|duration_'"
echo ""
echo "# Query Prometheus para debugging:"
echo "curl 'http://localhost:9091/api/v1/query?query=calls_total'"
echo ""
echo "# Restart dos servi√ßos se necess√°rio:"
echo "docker-compose restart otel-collector jaeger prometheus"

echo ""
echo -e "${GREEN}üéâ VALIDA√á√ÉO DO SPM CONCLU√çDA!${NC}"
